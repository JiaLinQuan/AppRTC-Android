// Automatically generated by the Thrifty compiler; do not edit!
// Generated on: 2017-02-19T11:45:33.011Z
// Source: /Users/nico/Documents/projekte/msc-webrtc/thrifty/webrtc.thrift at 24:1
package de.lespace.apprtc.thrift;

import com.microsoft.thrifty.TType;
import com.microsoft.thrifty.ThriftException;
import com.microsoft.thrifty.protocol.FieldMetadata;
import com.microsoft.thrifty.protocol.MessageMetadata;
import com.microsoft.thrifty.protocol.Protocol;
import com.microsoft.thrifty.service.ClientBase;
import com.microsoft.thrifty.service.MethodCall;
import com.microsoft.thrifty.service.ServiceMethodCallback;
import com.microsoft.thrifty.service.TMessageType;
import com.microsoft.thrifty.util.ProtocolUtil;
import java.io.IOException;

public class WebrtcClient extends ClientBase implements Webrtc {
  public WebrtcClient(Protocol protocol, ClientBase.Listener listener) {
    super(protocol, listener);
  }

  @Override
  public void call(Call call, ServiceMethodCallback<CallResult> callback) {
    this.enqueue(new CallCall(call, callback));
  }

  @Override
  public void registerUserId(RegisterUserId registerUserId,
      ServiceMethodCallback<RegisterResult> callback) {
    this.enqueue(new RegisterUserIdCall(registerUserId, callback));
  }

  private static final class CallCall extends MethodCall<CallResult> {
    private final Call call;

    CallCall(Call call, ServiceMethodCallback<CallResult> callback) {
      super("call", TMessageType.CALL, callback);
      if (call == null) throw new NullPointerException("call");
      this.call = call;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("call", 1, TType.STRUCT);
      de.lespace.apprtc.thrift.Call.ADAPTER.write(protocol, this.call);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected CallResult receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      CallResult result = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              de.lespace.apprtc.thrift.CallResult value = de.lespace.apprtc.thrift.CallResult.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class RegisterUserIdCall extends MethodCall<RegisterResult> {
    private final RegisterUserId registerUserId;

    RegisterUserIdCall(RegisterUserId registerUserId,
        ServiceMethodCallback<RegisterResult> callback) {
      super("registerUserId", TMessageType.CALL, callback);
      if (registerUserId == null) throw new NullPointerException("registerUserId");
      this.registerUserId = registerUserId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("registerUserId", 1, TType.STRUCT);
      de.lespace.apprtc.thrift.RegisterUserId.ADAPTER.write(protocol, this.registerUserId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected RegisterResult receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      RegisterResult result = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              de.lespace.apprtc.thrift.RegisterResult value = de.lespace.apprtc.thrift.RegisterResult.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }
}
